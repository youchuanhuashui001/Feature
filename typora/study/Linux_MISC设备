# Linux MISC 设备

## MISC 设备简介

​		所有的 MISC 设备驱动的主设备号都是10，不同的设备使用不同的从设备号。随着 Linux 字符设备驱动的不断增加，设备号会变得越来越紧张，尤其是主设备号，MISC 设备驱动就用于解决此问题。MISC 设备会自动创建 cdev，因此只需向 Linux 注册一个 miscdevice 设备即可。

​		`struct  miscdevice` 结构体描述如下：`include/linux/miscdevice.h`

```c
struct miscdevice  {
        int minor;		// 次设备号
        const char *name;	// 设备名称
        const struct file_operations *fops;	// 设备操作集
        struct list_head list;	// 杂项设备链表
        struct device *parent;
        struct device *this_device;
        const struct attribute_group **groups;
        const char *nodename;
        umode_t mode;
};
```

1. 定义一个 MISC 设备(miscdevice 类型)以后需要设置 minor、name 和 fops 这三个成员变量。

- minor：主设备号默认为10，次设备号可以自行指定或使用 .h文件中的预定义次设备号
- name：MISC 设备名称，注册成功后会在 `/dev` 目录生成名为 `name` 的设备文件
- fops：包括 open 、read、write 函数指针的实现

2. 当设置好 `struct miscdevice` 后，需要使用 `misc_register` 函数向 Linux 系统注册一个 MISC设备，函数原型如下：

```c
// misc : 要注册的 MISC 设备
// return : 0 -> 成功，负数 -> 失败
int misc_register(struct miscdevice *misc)
```



补充：

```c
				字符设备创建过程
1 alloc_chrdev_region(); /* 申请设备号 */
2 cdev_init(); /* 初始化 cdev */
3 cdev_add(); /* 添加 cdev */
4 class_create(); /* 创建类 */
5 device_create(); /* 创建设备 */

				杂项设备创建过程
misc_deregister()
                    
                    
                    
				字符设备删除过程
1 cdev_del(); /* 删除 cdev */
2 unregister_chrdev_region(); /* 注销设备号 */
3 device_destroy(); /* 删除设备 */
4 class_destroy(); /* 删除类 */
                 
				杂项设备删除过程
misc_unregister()
```

