#
# Configurations for Boot Loader
#

##############################################################
#
## I   SOC architechture & boot configurations
#
##############################################################
# ARCH: ARM/CSKY
CONFIG_ARCH = ARM

SRAM_ADDR_HEAD = F
# chip series: gx3113/gx3200/gx3201/gx3211/virgo
CHIP_CORE = virgo

# Board type
CHIP_BOARD = fpga

# CONFIG DEMOD: dvbs/dvbs2/dvbc/dvbt/dvbt2/dtmb/null
CONFIG_DEMOD = dvbs2

# DDR_CONFIG: DDR3 FRE (533000000), DDR2 FRE (400000000)
DDR_TYPE = DDR3
DDR_FREQUENCY = 783000000
DDR_SIZE = 128
DDR_SIP = y
# CONFIG_CHIP_PACKAGE: QFN88/LQFP156/BGA336/LQFP128/LQFP176
CONFIG_CHIP_PACKAGE = QFN88

# usb Series resistance config, 10 / 2.2 / 0 Î©
USB_RESISTANCE = 0

# USB EYE DIAGRAM TEST
USB_EYE_DIAGRAM_TEST = n

# cmdline config, if CMDLINE_VALUE = "" will not ENABLE_CMDLINE
#CMDLINE_VALUE = "mem=64M vdpmem=4M videomem=60M mem_end console=ttyS0,115200 init=/init"
CMDLINE_VALUE = "mem=64M vdpmem=4M videomem=60M mem_end console=ttyS0,115200 init=/init root=/dev/nfs rw nfsroot=192.168.101.200:/opt/nfs,v3 ip=192.168.101.3"
#CMDLINE_VALUE = "mem=163M videomem=93M mem_end console=ttyS0,115200 init=/init root=/dev/nfs rw nfsroot=192.168.101.200:/opt/nfs,v3 ip=192.168.101.3"

# if you set <=0, you'll enter prompt directly
CONFIG_BOOTDELAY = 3

ENABLE_KERNEL_DTB = y

ENABLE_DBG_PIN_NO_MULTT = y

CONFIG_FPGA_BOARD = y
BOOTLOADER_SIZE = 0x300000
#############################################################
#
##II boot kernel type & decompress support
#
#############################################################
ENABLE_UIMAGE = y

ENABLE_ROOTFS_YAFFS2 = n
ENABLE_ROOTFS_ROMFS = y
ENABLE_ROOTFS_CRAMFS = y
ENABLE_ROOTFS_UBIFS = n

ENABLE_DECOMPRESS_GZIP = y
ENABLE_DECOMPRESS_LZMA = y
ENABLE_DECOMPRESS_LZO = n
ENABLE_DECOMPRESS_ZLIB = y
ENABLE_COMPRESS_ZLIB = n

#############################################################
#
##III Module & function configurations
#
#############################################################
ENABLE_SPIFLASH = y
ENABLE_SPINAND = n
ENABLE_NANDFLASH = n
ENABLE_IRQ = y
ENABLE_UART_IRQ = n
ENABLE_GX_OTP= n
ENABLE_USB = n
ENABLE_FAT_WRITE = n
ENABLE_NET = n
ENABLE_I2C = n
ENABLE_GPIO= y
ENABLE_IRR = n
ENABLE_CTR = n
ENABLE_CHIP_INFO = y
ENABLE_WDT = y
ENABLE_TIME = y
ENABLE_RTC = n
ENABLE_JTAG_PASSWD = n

# eeprom config
ENABLE_EEPROM = n
EEPROM_I2C_BUS_NUM = 0
EEPROM_DEVICE_ADDR = 0x50
EEPROM_TYPE = "24c128"

# use io framework for read write ioct .. ops
ENABLE_IO_FRAMEWORK = n

# if you want to use flash write/erase, you must enable it
ENABLE_FLASH_FULLFUNCTION = y
# if you want to use otp write, you must enable it
ENABLE_OTP_FULLFUNCTION = y

# ENABLE SHOW LOGO. gx3201 only support show jpeg logo.
ENABLE_LOGO = n
# VOUT MODE ENABLE CONFIG
ENABLE_PAL = y
ENABLE_PAL_M = n
ENABLE_PAL_N = n
ENABLE_PAL_NC = n
ENABLE_NTSC_M = n
ENABLE_NTSC_443 = n
ENABLE_YPBPR_HDMI_480I = n
ENABLE_YPBPR_HDMI_480P = n
ENABLE_YPBPR_HDMI_576I = y
ENABLE_YPBPR_HDMI_576P = y
ENABLE_YPBPR_HDMI_720P_50HZ = y
ENABLE_YPBPR_HDMI_720P_60HZ = y
ENABLE_YPBPR_HDMI_1080I_50HZ = y
ENABLE_YPBPR_HDMI_1080I_60HZ = y
ENABLE_YPBPR_HDMI_1080P_50HZ = y
ENABLE_YPBPR_HDMI_1080P_60HZ = y

# ENABLE GDI. when one of LOGO/GDI is enabled, will enable vout too.
ENABLE_GDI = n
CONFIG_GDI_BPP = 16

# if you generate the bin for linux boot tool, please enable it
ENABLE_BOOT_TOOL = n

# generate gxloader with ota: set ENABLE_LIB n & ENABLE_OTA y
# generate OTA LIB: set ENABLE_LIB y & ENABLE_OTA n
ENABLE_LIB = n
ENABLE_OTA = n
ENABLE_CHIPTEST = n

# UART 0/1/2/3
CONFIG_UART_PORT = 0
CONFIG_UART_BAUDRATE = 115200
CONFIG_UART_TYPE = DW

CONFIG_WDT_TYPE = DW
CONFIG_RTC_TYPE = DW
CONFIG_I2C_TYPE = DW
CONFIG_MULPIN_VERIFY = y

# if you want to use quad/octal mode to read/write flash, please enable quad or octal
ENABLE_SPI_QUAD = n
ENABLE_SPI_OCTAL = n

CONFIG_24M_XTAL = y
#################################################################
#
##IV other option
#
#################################################################
# GDB DEBUG CONFIG
ENABLE_GDB_DEBUG = y

# CREATE DENALI ELF
ENABLE_DENALI_ELF = n

# module test switch
ENABLE_FLASH_TEST = y

# axi dma test
ENABLE_AXI_DMA_TEST = y

# gen spi test
ENABLE_GEN_SPI_TEST = n

# MEMORY function for memory test
ENABLE_MEMORY = n
ENABLE_MEMORY_TEST = n
ENABLE_MEMORY_PHASE_TEST = n

# SECURE BOOT VERIFY : SM2/RSA_SMI/RSA_PKCS
SECURE_VERIFY_TYPE =

# DATA ENCRYPT : AES128/SM4
DATA_ENCRYPT_TYPE =
# DATA ENCRYPT : 0x01(only stage1)/0x10(only stage2)/0x11(stage1 and stage2)/0x00(none derive)
DATA_ENCRYPT = 0x00
# DATA ENCRYPT DERIVE : 0x01(only stage1 derive)/0x10(only stage2 derive)/0x11(stage1 and stage2 derive)/0x00(none derive)
DATA_ENCRYPT_DERIVE =

# if you want to use ctr callback fun, you must enable it
ENABLE_CTR_CALLBACK = n

# if you want to use loader cmd fun, you must enable it
ENABLE_CMD = y

# if you want to jump to tee , you must enable it
ENABLE_TEE = n

# FireWall
ENABLE_FIREWALL = n

SECURE_FIRMWARE_LOAD = n

# DEMUX_ES(1 << 0), DEMUX_TSW(1 << 1), DEMUX_TSR(1 << 2), GP_ES(1 << 3), AUDIO_FIRMWARE(1 << 4), AUDIO_FRAME(1 << 5), VIDEO_FIRMWARE(1 << 6), VIDEO_FRAME(1 << 7), VPU_CAP(1 << 8), SCPU(1 << 9)
# if protect type is DEMUX_TSW/GP_ES, set MEMORY_PROTECT_TYPE= ((1 << 1) | (1 << 3))
MEMORY_PROTECT_TYPE =

ENABLE_SECURE_ALIGN = n
