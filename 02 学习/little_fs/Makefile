#/*
# * =====================================================================================
# *
# *       Filename:  Makefile.c
# *
# *       Compiler:  gcc
# *
# *        Company:  Hangzhou Nationalchip Science&Technology Co.Ltd.
# *
# * =====================================================================================
# */

MAKEFLAGS += --no-print-directory

-include .config

ifeq ($(ENABLE_LIB), y)
include script/ota.config
endif

ifeq ($(ENABLE_OTA), y)
include script/ota.config
endif

ifeq ($(GX_PREFIX), )
GX_PREFIX=$(abspath $(shell pwd)/../../library/goxceed)
endif

ifeq ($(CHIP_CORE), taurus)
JZ_TAURUS_LIST = 6617-NNMTS5A 6617-NNMTH1A 6617-NNMTH5A
CONFIG_JZ_TAURUS = $(if $(filter $(CHIP_BOARD), $(JZ_TAURUS_LIST)),y,n)
ifeq ($(CONFIG_JZ_TAURUS), y)
CHIP_CORE = gemini
endif
endif

#
# Build tools , ARM and CKcore Serial
#
ifeq ($(CONFIG_ARCH), ARM)

CROSS_COMPILE = arm-none-eabi-
ARCH = arm

else

CROSS_COMPILE = csky-elf-
ARCH = csky

endif

#
##Build command
#
AR      = $(CROSS_COMPILE)ar
AS      = $(CROSS_COMPILE)as
CC      = $(CROSS_COMPILE)gcc
LD      = $(CROSS_COMPILE)ld
OBJCOPY = $(CROSS_COMPILE)objcopy
OBJDUMP = $(CROSS_COMPILE)objdump
NM      = $(CROSS_COMPILE)nm
CPP     = $(CROSS_COMPILE)cpp

LIBGCC_PATH = $(shell dirname `$(CC) -print-libgcc-file-name`)
LIBGCC = -L$(LIBGCC_PATH) -lgcc
LIBS = -Llib  --start-group $(MY_LIBS) --end-group
MY_LIBS =
MY_DIR_LIBS =

ifeq ($(CONFIG_ARCH), ARM)
MY_LIBS += -lspinor_arm -lspinand_arm -lnand_arm
MY_DIR_LIBS += ./lib/libspinor_arm.a ./lib/libspinand_arm.a ./lib/libnand_arm.a
else
MY_LIBS += -lspinor_csky -lspinand_csky -lnand_csky
MY_DIR_LIBS += ./lib/libspinor_csky.a ./lib/libspinand_csky.a ./lib/libnand_csky.a
endif

MY_LIBS += -lgxav_$(ARCH)

define AR_LIB
@echo CREATE $@ > ar.mac
$(foreach LIB, $(MY_DIR_LIBS),
@echo ADDLIB $(LIB) >> ar.mac)
@echo SAVE >> ar.mac
@echo  END >> ar.mac
@$(AR) -M < ar.mac
@$(RM) ar.mac
endef

#
## Compiler options, Ckcore and ARM serial depending on CPU
#
ifeq ($(ENABLE_GDB_DEBUG), y)
CFLAGS  = -g -O0
else
CFLAGS  = -Os -g -ffunction-sections
endif

CFLAGS  += -fomit-frame-pointer \
	-fno-builtin -nostdinc -nostdlib \
	-fdata-sections -Wundef -Wstrict-prototypes \
	-fno-strict-aliasing -Wno-unused-function -mlittle-endian \
	-DBOOTLOADER -D__UBOOT__ -D__KERNEL__
LDFLAGS = --gc-sections
LDFLAGS += -EL

ifeq ($(CONFIG_ARCH), CSKY)
CFLAGS += -mcpu=ck610
else
ifeq ($(CONFIG_ARCH), ARM)
CFLAGS += -mcpu=cortex-a7
endif
endif

ifeq ($(ENABLE_CONFIG_DECOMPRESS_GZIP), y)
CFLAGS += -DCONFIG_DECOMPRESS_GZIP
endif
ifeq ($(ENABLE_CONFIG_DECOMPRESS_LZMA), y)
CFLAGS += -DCONFIG_DECOMPRESS_LZMA
endif
ifeq ($(ENABLE_CONFIG_DECOMPRESS_LZO), y)
CFLAGS += -DCONFIG_DECOMPRESS_LZO
endif

ifneq ($(findstring $(ENABLE_KERNEL_DTB)$(ENABLE_TEE),  yn yy ny y),)
ENABLE_ZIMAGE = y
ENABLE_UIMAGE = y
endif

ifeq ($(ENABLE_ROOTFS_YAFFS2), y)
CFLAGS += -DCONFIG_YAFFS_DIRECT -DCONFIG_YAFFS_SHORT_NAMES_IN_RAM \
	  -DCONFIG_YAFFS_YAFFS2 -DNO_Y_INLINE -DLINUX_VERSION_CODE=0x20622
endif

ifeq ($(CONFIG_NO_PRINT), y)
CFLAGS += -DGXLOG_LEVEL=0
endif

# -fprofile-arcs
CPPFLAGS = -I./include -I ./include/common -I ./include/common/decompress -I ./include/sys -I ./include/driver -I ./include/$(CHIP_CORE) -I ./board/$(CHIP_CORE)/board-$(CHIP_BOARD)/ -I ./board/$(CHIP_CORE)/board-generic/ -I ./board/$(CHIP_CORE)/ -I ./fs/littlefs/

ifeq ($(ENABLE_ECOS_OTA), y)
CPPFLAGS += -I $(GX_PREFIX)/$(ARCH)-ecos/include
endif

ifeq ($(ENABLE_IO_FRAMEWORK), y)
CPPFLAGS += -I./ate -I./ate/include/
endif

ifeq ($(ENABLE_KERNEL_DTB), y)
CPPFLAGS += -I./fdt/include
endif

CPPFLAGS += -include ./include/version_autogenerated.h

#
#####function optition, such as OTA ATE etc#####
#
ifeq ($(ENABLE_LIB), y)
ifeq ($(ENABLE_ECOS_OTA), y)
TARGET += libboot.a
else
TARGET += libnos.a
TARGET += target_ld
endif
endif

ifeq ($(ENABLE_LIB), y)

LIB_ATE = -L./lib  \
		  -L/usr/local/arm-eabi/lib/gcc/arm-eabi/4.3.2/ -lgcc
CFLAGS += -DCONFIG_ATE

ifeq ($(ENABLE_TEST), y)
CROSS_COMPILE = arm-elf-
#CROSS_COMPILE = arm-eabi-
TARGET += loader.bin
else
#TARGET += loader-ate.elf
endif

endif

#
##target for Makefile
#
ifeq ($(ENABLE_LIB), n)
TARGET += loader-flash.bin
endif

ifeq ($(ENABLE_THIRDLIB), y)
include ./script/thirdlib.mk
CFLAGS += -DNO_OS
endif

ifeq ($(ENABLE_EXTERN_PARAM), y)
EXTERN_PARAM_DEST_FILE=extern_param.bin
endif

PHONY := all
PHONY += include/version_autogenerated.h
all: checkcfg mkdir include/version_autogenerated.h $(EXTERN_PARAM_DEST_FILE) $(TARGET) checkbin

-include ./user/user.mk
-include ./script/rule_$(CHIP_CORE).mk

mkdir:
	@mkdir -p output

checkbin:
	@echo
	@-ls -l output/* | awk '{ print $$9 ":\t" $$5 }'

#
#########   clean #######################
#
PHONY += clean
clean:
	@-rm -f $(COBJS-y) $(SOBJS-y) $(stage1_COBJS-y) $(stage1_SOBJS-y)
	@-rm -f *~ *.elf *.map include/version_autogenerated.h *lds .cfg .tmp_file
	@-rm -rf cscope*  output/*
ifeq ($(ENABLE_EXTERN_PARAM), y)
	@-rm -rf extern_param.bin
endif
ifeq ($(CONFIG_STAGE2_COMPRESSED), y)
	@make -f cpu/compressed/Makefile clean
endif
	@echo "[clean done]"

.PHONY : $(PHONY)

cleanall: clean
	@rm -f .config


ifeq ($(ENABLE_ECOS_OTA), y)
install:
	@cp output/libboot.a      $(GX_PREFIX)/$(ARCH)-ecos/lib/
	@cp include/version_autogenerated.h   $(GX_PREFIX)/$(ARCH)-ecos/include/
else
install:
	@echo "copy lib & include file"
	@mkdir -p                $(GX_PREFIX)/$(ARCH)-nos/lib/
	@mkdir -p                $(GX_PREFIX)/$(ARCH)-nos/include/
	@mkdir -p                $(GX_PREFIX)/$(ARCH)-nos/include/sys/
	@mkdir -p                $(GX_PREFIX)/$(ARCH)-nos/include/linux/
	@mkdir -p                $(GX_PREFIX)/$(ARCH)-nos/include/common/
	@mkdir -p                $(GX_PREFIX)/$(ARCH)-nos/include/minifs/
	@cp output/libnos.a      $(GX_PREFIX)/$(ARCH)-nos/lib/
	@cp ate/target.ld        $(GX_PREFIX)/$(ARCH)-nos/lib/
	@cp include/stdio.h      $(GX_PREFIX)/$(ARCH)-nos/include/
	@cp include/usb*.h       $(GX_PREFIX)/$(ARCH)-nos/include/
	@cp include/fat.h        $(GX_PREFIX)/$(ARCH)-nos/include/
	@cp ate/include/gxdev.h  $(GX_PREFIX)/$(ARCH)-nos/include/
	@cp ate/include/io.h     $(GX_PREFIX)/$(ARCH)-nos/include/
	@cp include/stdio.h      $(GX_PREFIX)/$(ARCH)-nos/include/
	@cp include/string.h     $(GX_PREFIX)/$(ARCH)-nos/include/
	@cp include/limits.h     $(GX_PREFIX)/$(ARCH)-nos/include/
	@cp ate/include/setjmp.h $(GX_PREFIX)/$(ARCH)-nos/include/
	@cp include/errno.h      $(GX_PREFIX)/$(ARCH)-nos/include/
	@cp include/linux/errno.h      $(GX_PREFIX)/$(ARCH)-nos/include/linux
	@cp include/math.h       $(GX_PREFIX)/$(ARCH)-nos/include/
	@cp include/ctr.h        $(GX_PREFIX)/$(ARCH)-nos/include/
	@cp include/eeprom.h     $(GX_PREFIX)/$(ARCH)-nos/include/
	@cp include/flash.h      $(GX_PREFIX)/$(ARCH)-nos/include/
	@cp include/gdi.h        $(GX_PREFIX)/$(ARCH)-nos/include/
	@cp include/tdcxo.h        $(GX_PREFIX)/$(ARCH)-nos/include/
	@cp include/i2c.h        $(GX_PREFIX)/$(ARCH)-nos/include/
	@cp include/gpio.h       $(GX_PREFIX)/$(ARCH)-nos/include/
	@cp include/irr.h        $(GX_PREFIX)/$(ARCH)-nos/include/
	@cp include/driver/interrupt.h        $(GX_PREFIX)/$(ARCH)-nos/include/
	@cp include/gx_otp.h     $(GX_PREFIX)/$(ARCH)-nos/include/
	@cp include/time.h       $(GX_PREFIX)/$(ARCH)-nos/include/
	@cp include/rcc.h        $(GX_PREFIX)/$(ARCH)-nos/include/
	@cp include/scpu.h       $(GX_PREFIX)/$(ARCH)-nos/include/
	@cp include/serial.h     $(GX_PREFIX)/$(ARCH)-nos/include/
	@cp include/watchdog.h   $(GX_PREFIX)/$(ARCH)-nos/include/
	@cp include/commands.h   $(GX_PREFIX)/$(ARCH)-nos/include/
	@cp include/gxloader.h   $(GX_PREFIX)/$(ARCH)-nos/include/
	@cp include/boot.h       $(GX_PREFIX)/$(ARCH)-nos/include/
	@cp include/partition.h  $(GX_PREFIX)/$(ARCH)-nos/include/
ifeq ($(CONFIG_PARTITION_V5), y)
	@sed -i "s/\/\/#define CONFIG_PARTITION_V5/#define CONFIG_PARTITION_V5/g" $(GX_PREFIX)/$(ARCH)-nos/include/partition.h
endif
	@cp include/driver/gx_flash_common.h  $(GX_PREFIX)/$(ARCH)-nos/include/
	@cp include/fcntl.h      $(GX_PREFIX)/$(ARCH)-nos/include/
	@cp include/ctype.h      $(GX_PREFIX)/$(ARCH)-nos/include/
	@cp include/stdint.h     $(GX_PREFIX)/$(ARCH)-nos/include/
	@cp include/stddef.h     $(GX_PREFIX)/$(ARCH)-nos/include/
	@cp include/div64.h      $(GX_PREFIX)/$(ARCH)-nos/include/
	@cp include/stdbool.h    $(GX_PREFIX)/$(ARCH)-nos/include/
	@cp include/unistd.h     $(GX_PREFIX)/$(ARCH)-nos/include/
	@cp include/stdarg.h     $(GX_PREFIX)/$(ARCH)-nos/include/
	@cp include/stdlib.h     $(GX_PREFIX)/$(ARCH)-nos/include/
	@cp include/sys/types.h  $(GX_PREFIX)/$(ARCH)-nos/include/sys/
	@cp include/sys/util.h   $(GX_PREFIX)/$(ARCH)-nos/include/
	@cp include/sys/*.h      $(GX_PREFIX)/$(ARCH)-nos/include/sys/
	@cp include/chip_info.h  $(GX_PREFIX)/$(ARCH)-nos/include/
	@cp include/gx_ddr.h     $(GX_PREFIX)/$(ARCH)-nos/include/
	@cp ate/fs.h 		 	 $(GX_PREFIX)/$(ARCH)-nos/include/
	@cp include/minifs/api_minifs.h 	  $(GX_PREFIX)/$(ARCH)-nos/include/minifs/
	@cp include/version_autogenerated.h   $(GX_PREFIX)/$(ARCH)-nos/include/
	@cp include/net.h             $(GX_PREFIX)/$(ARCH)-nos/include/
	@cp include/net_ipv4.h        $(GX_PREFIX)/$(ARCH)-nos/include/
	@cp include/bootconfig.h      $(GX_PREFIX)/$(ARCH)-nos/include/
	@cp include/common/get_mem_info.h      $(GX_PREFIX)/$(ARCH)-nos/include/common/
	@cp include/common/gx_mem_info.h       $(GX_PREFIX)/$(ARCH)-nos/include/common/
endif

detect:
	@echo "will check board name."
	@./script/board_name_check.sh
	@echo "board name check finished."


