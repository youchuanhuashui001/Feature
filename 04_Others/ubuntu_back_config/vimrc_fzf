set termguicolors
set nobackup
set fencs=utf-8,cp936
set nu
set nocompatible  " VIM POWER!!!!

"set showmatch     " Show matching brackets (briefly jump to it) "set splitright "set nosplitbelow set backspace=indent,eol,start
" Backup and history options
set history=1000             " Increase history size
set autoread                 " automagically reloads a file if it was externally modified set autowrite set textwidth=80             " don't break long lines set formatoptions=tcmqn1
" list chars set list set listchars=tab:▸\ ,
" Appearance
" set title      " Change the terminal title
" set modelines=0
" set ttyfast    " Smooth editing
" set showmode
" set hidden
" set showcmd
" set showfulltag
set nowrap     " don't visually breaks long lines
set t_Co=256   " setting the number of colors
set cursorline

" Indentation
set shiftwidth=8
set tabstop=8
set softtabstop=8
set shiftround
"set expandtab

" Searching
set hlsearch   " highlight search results
set incsearch  " incremental search
set ignorecase
set infercase
set smartcase
set nogdefault " don't use global as default in substitutions
" Better completion menu
set wildmenu
set wildmode=longest,full
set wildignore+=*.o,*.pyc,*.swp

" persistent undo
" set undodir=~/.vim/undodir
" set undofile
" set undolevels=1000
" set undoreload=1000

" C syntax options (see :help c.vim)
let c_syntax_for_h    = 0 " use c syntax to .h files instead of c++ syntax
let c_space_errors    = 0 " trailing whitespave or spaces before tabs
let c_comment_strings = 0 " highligh numbers and strings insede comments
let c_no_comment_fold = 1 " disable syntax based folding for comments
let c_gnu             = 1 " highlight gnu extensions
let c_minlines        = 100

" syntastic
let g:syntastic_enable_signs        = 1
let g:syntastic_check_on_open       = 0
let g:syntastic_echo_current_error  = 0
let g:syntastic_auto_jump           = 0
let g:syntastic_enable_highlighting = 1
let g:syntastic_auto_loc_list       = 2
let g:syntastic_quiet_messages      = {'level': 'warnings'}
let g:syntastic_stl_format          = 'E:%e,W:%w'
let g:syntastic_mode_map            = { 'mode'              : 'passive',
                                      \ 'active_filetypes'  : [],
                                      \ 'passive_filetypes' : ['c', 'cpp', 'python', 'tex']}

" TagHighlight
let g:TagHighlightSettings = { 'IncludeLocals': 'False' }

" haskell syntax highlighting configuration
let hs_highlight_types      = 1
let hs_highlight_more_types = 1
let hs_highlight_boolean    = 1

" Tagbar configurations
" tagbar显示在左边
let g:tagbar_left = 0
let g:tagbar_sort = 0
let g:tagbar_updateonsave_maxlines=10000 
let g:tagbar_ctags_bin='/usr/bin/ctags'


" C highlighting
hi DefinedByUser ctermfg=lightgrey guifg=blue
hi cBraces ctermfg=lightgreen guifg=lightgreen
hi link cUserFunction DefinedByUser
hi link cUserFunctionPointer DefinedByUser

if has("syntax")
    syntax on
endif

" Setting highlight to extra whitespaces at end of the line
highlight ExtraWhitespace ctermbg=red guibg=red

if has("autocmd")
    autocmd BufEnter,InsertLeave * match ExtraWhitespace /\S\+\zs\s\+$/
    autocmd BufEnter *.rl setl ft=ragel
    autocmd BufEnter *.mips setl ft=mips
    autocmd Filetype asm,mips setl autoindent

    " Useful general options
    filetype plugin indent on

    " Disables any existing highlight
    autocmd VimEnter * nohl

    " Makefile sanity
    autocmd FileType make  setl noet ts=4 sw=4

    " C and CPP options
    autocmd FileType c,cpp let g:compiler_gcc_ignore_unmatched_lines = 1
"    autocmd FileType c,cpp setl et nosmartindent noautoindent cindent cinoptions=(0
    autocmd FileType c,cpp syn keyword cType off64_t

endif

imap jk <Esc>:w!<Enter>
" 彩虹括号
let g:rainbow_active = 1

" 搜索关键字
" let g:ctrlsf_ackprg = 'ag' 
" nmap     <leader>f <Plug>CtrlSFPrompt <C-R><C-W><CR>
" nnoremap <leader>x :CtrlSFClose<CR> 
" indent inside brackets
" inoremap {<CR> {<CR>}<Esc><S-O>

" Clearing highlight
" nnoremap <leader><Space> :nohl<CR>
nnoremap <Space>h :nohl<CR>

"ctags list map
" nmap <c-]> g<c-]>

"minibuffer list map
map <leader><leader> \be
" nnoremap bb \be

" 函数变量列表
nnoremap <silent> ee :TagbarToggle<CR>
" 复制列表
nnoremap <silent> <leader>y :YRShow<CR>
" 撤销树
nnoremap <silent> <leader>u :UndotreeToggle<CR>

" 文件模糊搜索
"let g:ctrlp_custom_ignore = {
"  \ 'dir':  '\.git$\|\.hg$\|\.svn$\|\.yardoc\|public\/images\|public\/system\|data\|log\|tmp$',
"  \ 'file': '\.exe$\|\.so$\|\.dat$'
"  \ }

" 快速跳转
map <Leader> <Plug>(easymotion-prefix)
"map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)

"缩进指示线"
let g:indentLine_char='┆'
let g:indentLine_enabled = 1

""autopep8设置"
let g:autopep8_disable_show_diff=1

call plug#begin('~/.vim/plugged')
" 复制列表
Plug 'vim-scripts/YankRing.vim'
" 文件模糊搜索
" Plug 'kien/ctrlp.vim'
" 多文件列表
Plug 'jlanzarotta/bufexplorer'
" 函数变量列表
Plug 'majutsushi/tagbar'
" 语法识别
Plug 'vim-syntastic/syntastic'
" 彩虹括号
Plug 'luochen1990/rainbow'
" 底部信息显示
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
" 快速跳转
Plug 'easymotion/vim-easymotion'
" 用不同颜色高亮单词或选中块
Plug 'Yggdroot/vim-mark'
" 撤销树
Plug 'mbbill/undotree'
" 多光标操作
Plug 'terryma/vim-multiple-cursors'
" 自动补齐
Plug 'vim-scripts/AutoComplPop'
" 搜索关键字
Plug 'dyng/ctrlsf.vim'
Plug 'tell-k/vim-autopep8'
Plug 'Yggdroot/indentLine'
" 目录树
Plug 'scrooloose/nerdtree'

" 自动生成tags
" Plug 'ludovicchabant/vim-gutentags'

Plug 'jiangmiao/auto-pairs'
Plug 'joshdick/onedark.vim'
Plug 'scrooloose/nerdtree'
Plug 'ntpeters/vim-better-whitespace'
Plug 'vim-scripts/TagHighlight'

" Plug 'henrynewcomer/vim-theme-papaya'
Plug 'ghifarit53/tokyonight-vim'
" Plug 'chuling/equinusocio-material.vim'
Plug 'liuchengxu/space-vim-dark'
" Plug 'AhmedAbdulrahman/vim-aylin'
" Plug 'dracula/dracula-theme'
" Plug 'rakr/vim-two-firewatch'

" python 语法
Plug 'vim-python/python-syntax'

" Theme
" Plug 'kyoz/purify', { 'rtp': 'vim' }
" Plug 'flazz/vim-colorschemes'


" C highlight
Plug 'octol/vim-cpp-enhanced-highlight'

" 翻译
Plug 'voldikss/vim-translate-me'

Plug 'NLKNguyen/papercolor-theme'
Plug 'NLKNguyen/c-syntax.vim'
Plug 'altercation/vim-colors-solarized'
Plug 'hardhackerlabs/theme-vim', { 'as': 'hardhacker' }
Plug 'baskerville/bubblegum'

Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'srcery-colors/srcery-vim'
Plug 'morhetz/gruvbox'
Plug 'ghifarit53/tokyonight-vim'

Plug 'mhinz/vim-signify', { 'tag': 'legacy' }
Plug 'dracula/vim', { 'as': 'dracula' }

Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

Plug 'r08ertliu/cscope-fzf'



call plug#end()

set noswapfile	"无交换文件"
set belloff=all	"去掉响铃"



" " gutentags搜索工程目录的标志，碰到这些文件/目录名就停止向上一级目录递归 "
" let g:gutentags_project_root = ['.root', '.svn', '.git', '.project']
" 
" " 所生成的数据文件的名称 "
" let g:gutentags_ctags_tagfile = '.tags'
" 
" " 将自动生成的 tags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录 "
" let s:vim_tags = expand('~/.cache/tags')
" let g:gutentags_cache_dir = s:vim_tags
" " 检测 ~/.cache/tags 不存在就新建 "
" if !isdirectory(s:vim_tags)
"    silent! call mkdir(s:vim_tags, 'p')
" endif
" 
" "" 配置 ctags 的参数 "
" let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
" let g:gutentags_ctags_extra_args += ['--c++-kinds=+pxI']
" let g:gutentags_ctags_extra_args += ['--c-kinds=+px']

" python function highlight
let g:python_highlight_all = 1

""""""""""""""""""""""""""""""""""""""""""""""""

"  C Highlight

let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_class_decl_highlight = 1
let g:cpp_posix_standard = 1
let g:cpp_experimental_simple_template_highlight = 1
let g:cpp_experimental_template_highlight = 1
let g:cpp_concepts_highlight = 1
" let g:cpp_no_function_highlight = 1
""""""""""""""""""""""""""""""""""""""""""""""""


""""""""""""""""""""""""""""""""""""""""""""""""""
" One dark theme

syntax on
" colorscheme onedark
" let g:lightline = {'colorscheme': 'onedark',}
" let g:airline_theme='onedark'


" let g:PaperColor_Theme_Options = {
"   \   'language': {
"   \     'haskell': {
"   \       'no_bold_types' : 1
"   \     },
"   \     'python': {
"   \       'highlight_builtins' : 1
"   \     },
"   \     'cpp': {
"   \       'highlight_standard_library': 1
"   \     },
"   \     'c': {
"   \       'highlight_builtins' : 1
"   \     }
"   \   }
"   \ }
" 
set t_Co=256   " This is may or may not needed.

set background=dark
" colorscheme PaperColor

" colorscheme dracula


" colorscheme srcery
" let g:srcery_bold = 1
" let g:lightline = {
"       \ 'colorscheme': 'srcery',
"       \ }
" let g:airline_theme='srcery'


" colorscheme gruvbox

""""   tokyonight """"
let g:tokyonight_style = 'night' " available: night, storm
let g:tokyonight_enable_italic = 1

colorscheme tokyonight
""""""""""""""""""""""""""""""""""""""""""""""""""

nnoremap <Space>e :NERDTreeToggle<CR>
" 跳转到函数
" nmap <Space>j <C-]>
" 回到函数
" nmap <Space>k <C-o>



" 你也可以自己更改，把 <Leader>d, <Leader>w 或者 <Leader>r 配置为你设置的快捷键

" 普通模式，<Leader>d 翻译光标下的文本，在命令行回显翻译内容
" nmap <silent> <Leader>d <Plug>Translate
" 可视模式，<Leader>d 翻译光标下的文本，在命令行回显翻译内容
" vmap <silent> <Leader>d <Plug>TranslateV
" 普通模式，<Leader>w 翻译光标下的文本，在窗口中显示翻译内容
nmap <silent> <Space>t <Plug>TranslateW
" 可视模式，<Leader>w 翻译光标下的文本，在窗口中显示翻译内容
vmap <silent> <Space>t <Plug>TranslateWV
" 普通模式，<Leader>r 替换光标下的文本为翻译内容
" nmap <silent> <Leader>r <Plug>TranslateR
" 可视模式，<Leader>r 替换光标下的文本为翻译内容
" vmap <silent> <Leader>r <Plug>TranslateRV
" 在翻译窗口打开的情况下，通过 <Leader>d 在主窗口和翻译窗口之间跳转

" 在翻译窗口中按 q 键关闭窗口


" <Space>1： 在右侧打开内置终端
nmap <Space>1 :below vertical terminal<CR>

"  折叠代码
"  zf 创建折行，f 表示 fold
"  zo 打开折行，o 表示 open
"  zc 关闭折行，c 表示 close
"  zd 删除折行，d 表示 delete


" Git Config
" set updatetime=100


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" cscope setting
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" if has("cscope")
"   set csprg=/usr/bin/cscope
"   set csto=1
"   set cst
"   set nocsverb
"   " add any database in current directory
"   if filereadable("cscope.out")
"       cs add cscope.out
"   endif
"   set csverb
" endif

" set cscopequickfix=s-,c-,d-,i-,t-,e-,a-

" autocmd FileType qf setlocal filetype=c

" 查找这个 C 符号
"  nmap <C-]>s :cs find s <C-R>=expand("<cword>")<CR><CR>
"  " 查找定义
"  " nmap <C-]>g :cs find g <C-R>=expand("<cword>")<CR><CR>
"  " 查找被调用的函数
"  nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
" 查找文本字符串
" nmap <C-@>t :cs find t <C-R>=expand("<cword>")<CR><CR>
" " 查找 egrep 的 pattern
" nmap <C-@>e :cs find e <C-R>=expand("<cword>")<CR><CR>
" " 查找这个文件
" nmap <C-@>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
" " 查找 #include 了这个文件的所有文件
" nmap <C-@>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
" nmap <C-@>d :cs find d <C-R>=expand("<cword>")<CR><CR>




"""""""""""""" fzf config  """"""""""""""""""""""""""
"
" Initialize configuration dictionary
let g:fzf_vim = {}
" Use location list instead of quickfix list
let g:fzf_vim.listproc = { list -> fzf#vim#listproc#location(list) }
" 预览页面默认为 cat，使用更好看的页面
command! -bang -nargs=? -complete=dir Files
    \ call fzf#vim#files(<q-args>, {'options': ['--layout=reverse', '--info=inline', '--preview', '~/.vim/plugged/fzf.vim/bin/preview.sh {}']}, <bang>0)
" nnoremap <silent> <Leader>cg :call CscopeFZF("g", 0, "<C-R>=expand('<cword>')<CR>")<CR>
" nnoremap <silent> <Leader>cc :call CscopeFZF("c", 0, "<C-R>=expand('<cword>')<CR>")<CR>
" nnoremap <silent> <Leader>cf :call CscopeFZF("f", 0, "<C-R>=expand('<cfile>')<CR>")<CR>
" nnoremap <silent> <Leader>cs :call CscopeFZF("s", 0, "<C-R>=expand('<cword>')<CR>")<CR>
" nnoremap <silent> <Leader>ct :call CscopeFZF("t", 0, "<C-R>=expand('<cword>')<CR>")<CR>

"""""""""""" key-word """"""""""""""
"      Ctrl + n = 选择下一项       "
"      Ctrl + p = 选择上一项       "
""""""""""""""""""""""""""""""""""""

" 查找本 C 符号
nmap <C-]> :call CscopeFZF("g", 0, "<C-R>=expand('<cword>')<CR>")<CR>
" 查找调用本函数的函数
nmap <Leader>f :call CscopeFZF("c", 0, "<C-R>=expand('<cword>')<CR>")<CR>
" grep
nmap <Leader>g :call CscopeFZF("e", 0, "<C-R>=expand('<cword>')<CR>")<CR>
" find file
" nmap <C-m> :call CscopeFZF("f", 0, "<C-R>=expand('<cfile>')<CR>")<CR>
nmap <C-p> :CsFZFFile<SPACE> . <CR>

" :CsFZFAssign [SYMBOL]	Find assignments to this symbol
" 查找此符号的赋值
" :CsFZFCaller [FUNCTION]	Find functions calling this function
" 查找调用此函数的函数
" :CsFZFCallee [FUNCTION]	Find functions called by this function
" 查找此函数调用的函数
" :CsFZFEgrep [PATTERN]	Find this egrep pattern 找到这个 egrep 模式
" :CsFZFFile [FILE]	Find this file 查找此文件
" :CsFZFGlobal [SYMBOL]	Find this definition 找到这个定义
" :CsFZFInc [FILE]	Find files #including this file
" #including 此文件查找文件
" :CsFZFSymbol [SYMBOL]	Find this C symbol 找到这个 C 符号
" :CsFZFText [TEXT]	Find this text string 查找此文本字符串

" nnoremap <Leader>cG :CsFZFGlobal<SPACE>
" nnoremap <leader>f :CsFZFCaller<SPACE>
" nnoremap <Leader>cF :CsFZFFile<SPACE>
" nnoremap <Leader>cT :CsFZFText<SPACE>
"
" nnoremap <Leader>cS :CsFZFSymbol<SPACE>
"""""""""""""" fzf config  """"""""""""""""""""""""""
